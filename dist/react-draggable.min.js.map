{"version":3,"file":"react-draggable.min.js","sources":["../node_modules/object-assign/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/classnames/index.js","../lib/utils/shims.js","../lib/utils/getPrefix.js","../lib/utils/domFns.js","../lib/utils/positionFns.js","../lib/DraggableCore.js","../lib/Draggable.js","../lib/umd.js"],"sourcesContent":["/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// @flow\r\n// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\r\nexport function findInArray(array: Array<any> | TouchList, callback: Function): any {\r\n  for (let i = 0, length = array.length; i < length; i++) {\r\n    if (callback.apply(callback, [array[i], i, array])) return array[i];\r\n  }\r\n}\r\n\r\nexport function isFunction(func: any): boolean {\r\n  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\r\n}\r\n\r\nexport function isNum(num: any): boolean {\r\n  return typeof num === 'number' && !isNaN(num);\r\n}\r\n\r\nexport function int(a: string): number {\r\n  return parseInt(a, 10);\r\n}\r\n\r\nexport function dontSetMe(props: Object, propName: string, componentName: string) {\r\n  if (props[propName]) {\r\n    return new Error(`Invalid prop ${propName} passed to ${componentName} - do not set this, set it on the child.`);\r\n  }\r\n}\r\n","// @flow\r\nconst prefixes = ['Moz', 'Webkit', 'O', 'ms'];\r\nexport function getPrefix(prop: string='transform'): string {\r\n  // Checking specifically for 'window.document' is for pseudo-browser server-side\r\n  // environments that define 'window' as the global context.\r\n  // E.g. React-rails (see https://github.com/reactjs/react-rails/pull/84)\r\n  if (typeof window === 'undefined' || typeof window.document === 'undefined') return '';\r\n\r\n  const style = window.document.documentElement.style;\r\n\r\n  if (prop in style) return '';\r\n\r\n  for (let i = 0; i < prefixes.length; i++) {\r\n    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\nexport function browserPrefixToKey(prop: string, prefix: string): string {\r\n  return prefix ? `${prefix}${kebabToTitleCase(prop)}` : prop;\r\n}\r\n\r\nexport function browserPrefixToStyle(prop: string, prefix: string): string {\r\n  return prefix ? `-${prefix.toLowerCase()}-${prop}` : prop;\r\n}\r\n\r\nfunction kebabToTitleCase(str: string): string {\r\n  let out = '';\r\n  let shouldCapitalize = true;\r\n  for (let i = 0; i < str.length; i++) {\r\n    if (shouldCapitalize) {\r\n      out += str[i].toUpperCase();\r\n      shouldCapitalize = false;\r\n    } else if (str[i] === '-') {\r\n      shouldCapitalize = true;\r\n    } else {\r\n      out += str[i];\r\n    }\r\n  }\r\n  return out;\r\n}\r\n\r\n// Default export is the prefix itself, like 'Moz', 'Webkit', etc\r\n// Note that you may have to re-test for certain things; for instance, Chrome 50\r\n// can handle unprefixed `transform`, but not unprefixed `user-select`\r\nexport default getPrefix();\r\n","// @flow\r\nimport {findInArray, isFunction, int} from './shims';\r\nimport browserPrefix, {browserPrefixToKey} from './getPrefix';\r\n\r\nimport type {ControlPosition, MouseTouchEvent} from './types';\r\n\r\nlet matchesSelectorFunc = '';\r\nexport function matchesSelector(el: Node, selector: string): boolean {\r\n  if (!matchesSelectorFunc) {\r\n    matchesSelectorFunc = findInArray([\r\n      'matches',\r\n      'webkitMatchesSelector',\r\n      'mozMatchesSelector',\r\n      'msMatchesSelector',\r\n      'oMatchesSelector'\r\n    ], function(method){\r\n      // $FlowIgnore: Doesn't think elements are indexable\r\n      return isFunction(el[method]);\r\n    });\r\n  }\r\n\r\n  // Might not be found entirely (not an Element?) - in that case, bail\r\n  // $FlowIgnore: Doesn't think elements are indexable\r\n  if (!isFunction(el[matchesSelectorFunc])) return false;\r\n\r\n  // $FlowIgnore: Doesn't think elements are indexable\r\n  return el[matchesSelectorFunc](selector);\r\n}\r\n\r\n// Works up the tree to the draggable itself attempting to match selector.\r\nexport function matchesSelectorAndParentsTo(el: Node, selector: string, baseNode: Node): boolean {\r\n  let node = el;\r\n  do {\r\n    if (matchesSelector(node, selector)) return true;\r\n    if (node === baseNode) return false;\r\n    node = node.parentNode;\r\n  } while (node);\r\n\r\n  return false;\r\n}\r\n\r\nexport function addEvent(el: ?Node, event: string, handler: Function): void {\r\n  if (!el) { return; }\r\n  if (el.attachEvent) {\r\n    el.attachEvent('on' + event, handler);\r\n  } else if (el.addEventListener) {\r\n    el.addEventListener(event, handler, true);\r\n  } else {\r\n    // $FlowIgnore: Doesn't think elements are indexable\r\n    el['on' + event] = handler;\r\n  }\r\n}\r\n\r\nexport function removeEvent(el: ?Node, event: string, handler: Function): void {\r\n  if (!el) { return; }\r\n  if (el.detachEvent) {\r\n    el.detachEvent('on' + event, handler);\r\n  } else if (el.removeEventListener) {\r\n    el.removeEventListener(event, handler, true);\r\n  } else {\r\n    // $FlowIgnore: Doesn't think elements are indexable\r\n    el['on' + event] = null;\r\n  }\r\n}\r\n\r\nexport function outerHeight(node: HTMLElement): number {\r\n  // This is deliberately excluding margin for our calculations, since we are using\r\n  // offsetTop which is including margin. See getBoundPosition\r\n  let height = node.clientHeight;\r\n  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\r\n  height += int(computedStyle.borderTopWidth);\r\n  height += int(computedStyle.borderBottomWidth);\r\n  return height;\r\n}\r\n\r\nexport function outerWidth(node: HTMLElement): number {\r\n  // This is deliberately excluding margin for our calculations, since we are using\r\n  // offsetLeft which is including margin. See getBoundPosition\r\n  let width = node.clientWidth;\r\n  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\r\n  width += int(computedStyle.borderLeftWidth);\r\n  width += int(computedStyle.borderRightWidth);\r\n  return width;\r\n}\r\nexport function innerHeight(node: HTMLElement): number {\r\n  let height = node.clientHeight;\r\n  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\r\n  height -= int(computedStyle.paddingTop);\r\n  height -= int(computedStyle.paddingBottom);\r\n  return height;\r\n}\r\n\r\nexport function innerWidth(node: HTMLElement): number {\r\n  let width = node.clientWidth;\r\n  const computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\r\n  width -= int(computedStyle.paddingLeft);\r\n  width -= int(computedStyle.paddingRight);\r\n  return width;\r\n}\r\n\r\n// Get from offsetParent\r\nexport function offsetXYFromParent(evt: {clientX: number, clientY: number}, offsetParent: HTMLElement): ControlPosition {\r\n  const isBody = offsetParent === offsetParent.ownerDocument.body;\r\n  const offsetParentRect = isBody ? {left: 0, top: 0} : offsetParent.getBoundingClientRect();\r\n\r\n  const x = evt.clientX + offsetParent.scrollLeft - offsetParentRect.left;\r\n  const y = evt.clientY + offsetParent.scrollTop - offsetParentRect.top;\r\n\r\n  return {x, y};\r\n}\r\n\r\nexport function createCSSTransform({x, y}: {x: number, y: number}): Object {\r\n  // Replace unitless items with px\r\n  return {[browserPrefixToKey('transform', browserPrefix)]: 'translate(' + x + 'px,' + y + 'px)'};\r\n}\r\n\r\nexport function createSVGTransform({x, y}: {x: number, y: number}): string {\r\n  return 'translate(' + x + ',' + y + ')';\r\n}\r\n\r\nexport function getTouch(e: MouseTouchEvent, identifier: number): ?{clientX: number, clientY: number} {\r\n  return (e.targetTouches && findInArray(e.targetTouches, t => identifier === t.identifier)) ||\r\n         (e.changedTouches && findInArray(e.changedTouches, t => identifier === t.identifier));\r\n}\r\n\r\nexport function getTouchIdentifier(e: MouseTouchEvent): ?number {\r\n  if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;\r\n  if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;\r\n}\r\n\r\n// User-select Hacks:\r\n//\r\n// Useful for preventing blue highlights all over everything when dragging.\r\n\r\n// Note we're passing `document` b/c we could be iframed\r\nexport function addUserSelectStyles(doc: ?Document) {\r\n  if (!doc) return;\r\n  let styleEl = doc.getElementById('react-draggable-style-el');\r\n  if (!styleEl) {\r\n    styleEl = doc.createElement('style');\r\n    styleEl.type = 'text/css';\r\n    styleEl.id = 'react-draggable-style-el';\r\n    styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {background: transparent;}\\n';\r\n    styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {background: transparent;}\\n';\r\n    doc.getElementsByTagName('head')[0].appendChild(styleEl);\r\n  }\r\n  if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');\r\n}\r\n\r\nexport function removeUserSelectStyles(doc: ?Document) {\r\n  try {\r\n    if (doc && doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection');\r\n    // $FlowIgnore: IE\r\n    if (doc.selection) {\r\n      // $FlowIgnore: IE\r\n      doc.selection.empty();\r\n    } else {\r\n      window.getSelection().removeAllRanges();  // remove selection caused by scroll\r\n    }\r\n  } catch (e) {\r\n    // probably IE\r\n  }\r\n}\r\n\r\nexport function styleHacks(childStyle: Object = {}): Object {\r\n  // Workaround IE pointer events; see #51\r\n  // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278\r\n  return {\r\n    touchAction: 'none',\r\n    ...childStyle\r\n  };\r\n}\r\n\r\nexport function addClassName(el: HTMLElement, className: string) {\r\n  if (el.classList) {\r\n    el.classList.add(className);\r\n  } else {\r\n    if (!el.className.match(new RegExp(`(?:^|\\\\s)${className}(?!\\\\S)`))) {\r\n      el.className += ` ${className}`;\r\n    }\r\n  }\r\n}\r\n\r\nexport function removeClassName(el: HTMLElement, className: string) {\r\n  if (el.classList) {\r\n    el.classList.remove(className);\r\n  } else {\r\n    el.className = el.className.replace(new RegExp(`(?:^|\\\\s)${className}(?!\\\\S)`, 'g'), '');\r\n  }\r\n}\r\n","// @flow\r\nimport {isNum, int} from './shims';\r\nimport ReactDOM from 'react-dom';\r\nimport {getTouch, innerWidth, innerHeight, offsetXYFromParent, outerWidth, outerHeight} from './domFns';\r\n\r\nimport type Draggable from '../Draggable';\r\nimport type {Bounds, ControlPosition, DraggableData, MouseTouchEvent} from './types';\r\nimport type DraggableCore from '../DraggableCore';\r\n\r\nexport function getBoundPosition(draggable: Draggable, x: number, y: number): [number, number] {\r\n  // If no bounds, short-circuit and move on\r\n  if (!draggable.props.bounds) return [x, y];\r\n\r\n  // Clone new bounds\r\n  let {bounds} = draggable.props;\r\n  bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);\r\n  const node = findDOMNode(draggable);\r\n\r\n  if (typeof bounds === 'string') {\r\n    const {ownerDocument} = node;\r\n    const ownerWindow = ownerDocument.defaultView;\r\n    let boundNode;\r\n    if (bounds === 'parent') {\r\n      boundNode = node.parentNode;\r\n    } else {\r\n      boundNode = ownerDocument.querySelector(bounds);\r\n    }\r\n    if (!(boundNode instanceof ownerWindow.HTMLElement)) {\r\n      throw new Error('Bounds selector \"' + bounds + '\" could not find an element.');\r\n    }\r\n    const nodeStyle = ownerWindow.getComputedStyle(node);\r\n    const boundNodeStyle = ownerWindow.getComputedStyle(boundNode);\r\n    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\r\n    bounds = {\r\n      left: -node.offsetLeft + int(boundNodeStyle.paddingLeft) + int(nodeStyle.marginLeft),\r\n      top: -node.offsetTop + int(boundNodeStyle.paddingTop) + int(nodeStyle.marginTop),\r\n      right: innerWidth(boundNode) - outerWidth(node) - node.offsetLeft +\r\n        int(boundNodeStyle.paddingRight) - int(nodeStyle.marginRight),\r\n      bottom: innerHeight(boundNode) - outerHeight(node) - node.offsetTop +\r\n        int(boundNodeStyle.paddingBottom) - int(nodeStyle.marginBottom)\r\n    };\r\n  }\r\n\r\n  // Keep x and y below right and bottom limits...\r\n  if (isNum(bounds.right)) x = Math.min(x, bounds.right);\r\n  if (isNum(bounds.bottom)) y = Math.min(y, bounds.bottom);\r\n\r\n  // But above left and top limits.\r\n  if (isNum(bounds.left)) x = Math.max(x, bounds.left);\r\n  if (isNum(bounds.top)) y = Math.max(y, bounds.top);\r\n\r\n  return [x, y];\r\n}\r\n\r\nexport function snapToGrid(grid: [number, number], pendingX: number, pendingY: number): [number, number] {\r\n  const x = Math.round(pendingX / grid[0]) * grid[0];\r\n  const y = Math.round(pendingY / grid[1]) * grid[1];\r\n  return [x, y];\r\n}\r\n\r\nexport function canDragX(draggable: Draggable): boolean {\r\n  return draggable.props.axis === 'both' || draggable.props.axis === 'x';\r\n}\r\n\r\nexport function canDragY(draggable: Draggable): boolean {\r\n  return draggable.props.axis === 'both' || draggable.props.axis === 'y';\r\n}\r\n\r\n// Get {x, y} positions from event.\r\nexport function getControlPosition(e: MouseTouchEvent, touchIdentifier: ?number, draggableCore: DraggableCore): ?ControlPosition {\r\n  const touchObj = typeof touchIdentifier === 'number' ? getTouch(e, touchIdentifier) : null;\r\n  if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch\r\n  const node = findDOMNode(draggableCore);\r\n  // User can provide an offsetParent if desired.\r\n  const offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;\r\n  return offsetXYFromParent(touchObj || e, offsetParent);\r\n}\r\n\r\n// Create an data object exposed by <DraggableCore>'s events\r\nexport function createCoreData(draggable: DraggableCore, x: number, y: number): DraggableData {\r\n  const state = draggable.state;\r\n  const isStart = !isNum(state.lastX);\r\n  const node = findDOMNode(draggable);\r\n\r\n  if (isStart) {\r\n    // If this is our first move, use the x and y as last coords.\r\n    return {\r\n      node,\r\n      deltaX: 0, deltaY: 0,\r\n      lastX: x, lastY: y,\r\n      x, y,\r\n    };\r\n  } else {\r\n    // Otherwise calculate proper values.\r\n    return {\r\n      node,\r\n      deltaX: x - state.lastX, deltaY: y - state.lastY,\r\n      lastX: state.lastX, lastY: state.lastY,\r\n      x, y,\r\n    };\r\n  }\r\n}\r\n\r\n// Create an data exposed by <Draggable>'s events\r\nexport function createDraggableData(draggable: Draggable, coreData: DraggableData): DraggableData {\r\n  return {\r\n    node: coreData.node,\r\n    x: draggable.state.x + coreData.deltaX,\r\n    y: draggable.state.y + coreData.deltaY,\r\n    deltaX: coreData.deltaX,\r\n    deltaY: coreData.deltaY,\r\n    lastX: draggable.state.x,\r\n    lastY: draggable.state.y\r\n  };\r\n}\r\n\r\n// A lot faster than stringify/parse\r\nfunction cloneBounds(bounds: Bounds): Bounds {\r\n  return {\r\n    left: bounds.left,\r\n    top: bounds.top,\r\n    right: bounds.right,\r\n    bottom: bounds.bottom\r\n  };\r\n}\r\n\r\nfunction findDOMNode(draggable: Draggable | DraggableCore): HTMLElement {\r\n  const node = ReactDOM.findDOMNode(draggable);\r\n  if (!node) {\r\n    throw new Error('<DraggableCore>: Unmounted during event!');\r\n  }\r\n  // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME\r\n  return node;\r\n}\r\n","// @flow\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOM from 'react-dom';\r\nimport {matchesSelectorAndParentsTo, addEvent, removeEvent, addUserSelectStyles, getTouchIdentifier,\r\n        removeUserSelectStyles, styleHacks} from './utils/domFns';\r\nimport {createCoreData, getControlPosition, snapToGrid} from './utils/positionFns';\r\nimport {dontSetMe} from './utils/shims';\r\nimport log from './utils/log';\r\n\r\nimport type {EventHandler, MouseTouchEvent} from './utils/types';\r\nimport type {Element as ReactElement} from 'react';\r\n\r\n// Simple abstraction for dragging events names.\r\nconst eventsFor = {\r\n  touch: {\r\n    start: 'touchstart',\r\n    move: 'touchmove',\r\n    stop: 'touchend'\r\n  },\r\n  mouse: {\r\n    start: 'mousedown',\r\n    move: 'mousemove',\r\n    stop: 'mouseup'\r\n  }\r\n};\r\n\r\n// Default to mouse events.\r\nlet dragEventFor = eventsFor.mouse;\r\n\r\ntype DraggableCoreState = {\r\n  dragging: boolean,\r\n  lastX: number,\r\n  lastY: number,\r\n  touchIdentifier: ?number\r\n};\r\n\r\nexport type DraggableBounds = {\r\n  left: number,\r\n  right: number,\r\n  top: number,\r\n  bottom: number,\r\n};\r\n\r\nexport type DraggableData = {\r\n  node: HTMLElement,\r\n  x: number, y: number,\r\n  deltaX: number, deltaY: number,\r\n  lastX: number, lastY: number,\r\n};\r\n\r\nexport type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void;\r\n\r\nexport type ControlPosition = {x: number, y: number};\r\n\r\nexport type DraggableCoreProps = {\r\n  allowAnyClick: boolean,\r\n  cancel: string,\r\n  children: ReactElement<any>,\r\n  disabled: boolean,\r\n  enableUserSelectHack: boolean,\r\n  offsetParent: HTMLElement,\r\n  grid: [number, number],\r\n  handle: string,\r\n  onStart: DraggableEventHandler,\r\n  onDrag: DraggableEventHandler,\r\n  onStop: DraggableEventHandler,\r\n  onMouseDown: (e: MouseEvent) => void,\r\n};\r\n\r\n//\r\n// Define <DraggableCore>.\r\n//\r\n// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can\r\n// work well with libraries that require more control over the element.\r\n//\r\n\r\nexport default class DraggableCore extends React.Component<DraggableCoreProps, DraggableCoreState> {\r\n\r\n  static displayName = 'DraggableCore';\r\n\r\n  static propTypes = {\r\n    /**\r\n     * `allowAnyClick` allows dragging using any mouse button.\r\n     * By default, we only accept the left button.\r\n     *\r\n     * Defaults to `false`.\r\n     */\r\n    allowAnyClick: PropTypes.bool,\r\n\r\n    /**\r\n     * `disabled`, if true, stops the <Draggable> from dragging. All handlers,\r\n     * with the exception of `onMouseDown`, will not fire.\r\n     */\r\n    disabled: PropTypes.bool,\r\n\r\n    /**\r\n     * By default, we add 'user-select:none' attributes to the document body\r\n     * to prevent ugly text selection during drag. If this is causing problems\r\n     * for your app, set this to `false`.\r\n     */\r\n    enableUserSelectHack: PropTypes.bool,\r\n\r\n    /**\r\n     * `offsetParent`, if set, uses the passed DOM node to compute drag offsets\r\n     * instead of using the parent node.\r\n     */\r\n    offsetParent: function(props: DraggableCoreProps, propName: $Keys<DraggableCoreProps>) {\r\n      if (props[propName] && props[propName].nodeType !== 1) {\r\n        throw new Error('Draggable\\'s offsetParent must be a DOM Node.');\r\n      }\r\n    },\r\n\r\n    /**\r\n     * `grid` specifies the x and y that dragging should snap to.\r\n     */\r\n    grid: PropTypes.arrayOf(PropTypes.number),\r\n\r\n    /**\r\n     * `handle` specifies a selector to be used as the handle that initiates drag.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```jsx\r\n     *   let App = React.createClass({\r\n     *       render: function () {\r\n     *         return (\r\n     *            <Draggable handle=\".handle\">\r\n     *              <div>\r\n     *                  <div className=\"handle\">Click me to drag</div>\r\n     *                  <div>This is some other content</div>\r\n     *              </div>\r\n     *           </Draggable>\r\n     *         );\r\n     *       }\r\n     *   });\r\n     * ```\r\n     */\r\n    handle: PropTypes.string,\r\n\r\n    /**\r\n     * `cancel` specifies a selector to be used to prevent drag initialization.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```jsx\r\n     *   let App = React.createClass({\r\n     *       render: function () {\r\n     *           return(\r\n     *               <Draggable cancel=\".cancel\">\r\n     *                   <div>\r\n     *                     <div className=\"cancel\">You can't drag from here</div>\r\n     *                     <div>Dragging here works fine</div>\r\n     *                   </div>\r\n     *               </Draggable>\r\n     *           );\r\n     *       }\r\n     *   });\r\n     * ```\r\n     */\r\n    cancel: PropTypes.string,\r\n\r\n    /**\r\n     * Called when dragging starts.\r\n     * If this function returns the boolean false, dragging will be canceled.\r\n     */\r\n    onStart: PropTypes.func,\r\n\r\n    /**\r\n     * Called while dragging.\r\n     * If this function returns the boolean false, dragging will be canceled.\r\n     */\r\n    onDrag: PropTypes.func,\r\n\r\n    /**\r\n     * Called when dragging stops.\r\n     * If this function returns the boolean false, the drag will remain active.\r\n     */\r\n    onStop: PropTypes.func,\r\n\r\n    /**\r\n     * A workaround option which can be passed if onMouseDown needs to be accessed,\r\n     * since it'll always be blocked (as there is internal use of onMouseDown)\r\n     */\r\n    onMouseDown: PropTypes.func,\r\n\r\n    /**\r\n     * These properties should be defined on the child, not here.\r\n     */\r\n    className: dontSetMe,\r\n    style: dontSetMe,\r\n    transform: dontSetMe\r\n  };\r\n\r\n  static defaultProps = {\r\n    allowAnyClick: false, // by default only accept left click\r\n    cancel: null,\r\n    disabled: false,\r\n    enableUserSelectHack: true,\r\n    offsetParent: null,\r\n    handle: null,\r\n    grid: null,\r\n    transform: null,\r\n    onStart: function(){},\r\n    onDrag: function(){},\r\n    onStop: function(){},\r\n    onMouseDown: function(){}\r\n  };\r\n\r\n  state = {\r\n    dragging: false,\r\n    // Used while dragging to determine deltas.\r\n    lastX: NaN, lastY: NaN,\r\n    touchIdentifier: null\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    // Remove any leftover event handlers. Remove both touch and mouse handlers in case\r\n    // some browser quirk caused a touch event to fire during a mouse move, or vice versa.\r\n    const thisNode = ReactDOM.findDOMNode(this);\r\n    if (thisNode) {\r\n      const {ownerDocument} = thisNode;\r\n      removeEvent(ownerDocument, eventsFor.mouse.move, this.handleDrag);\r\n      removeEvent(ownerDocument, eventsFor.touch.move, this.handleDrag);\r\n      removeEvent(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);\r\n      removeEvent(ownerDocument, eventsFor.touch.stop, this.handleDragStop);\r\n      if (this.props.enableUserSelectHack) removeUserSelectStyles(ownerDocument);\r\n    }\r\n  }\r\n\r\n  handleDragStart: EventHandler<MouseTouchEvent> = (e) => {\r\n    // Make it possible to attach event handlers on top of this one.\r\n    this.props.onMouseDown(e);\r\n\r\n    // Only accept left-clicks.\r\n    if (!this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false;\r\n\r\n    // Get nodes. Be sure to grab relative document (could be iframed)\r\n    const thisNode = ReactDOM.findDOMNode(this);\r\n    if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {\r\n      throw new Error('<DraggableCore> not mounted on DragStart!');\r\n    }\r\n    const {ownerDocument} = thisNode;\r\n\r\n    // Short circuit if handle or cancel prop was provided and selector doesn't match.\r\n    if (this.props.disabled ||\r\n      (!(e.target instanceof ownerDocument.defaultView.Node)) ||\r\n      (this.props.handle && !matchesSelectorAndParentsTo(e.target, this.props.handle, thisNode)) ||\r\n      (this.props.cancel && matchesSelectorAndParentsTo(e.target, this.props.cancel, thisNode))) {\r\n      return;\r\n    }\r\n\r\n    // Set touch identifier in component state if this is a touch event. This allows us to\r\n    // distinguish between individual touches on multitouch screens by identifying which\r\n    // touchpoint was set to this element.\r\n    const touchIdentifier = getTouchIdentifier(e);\r\n    this.setState({touchIdentifier});\r\n\r\n    // Get the current drag point from the event. This is used as the offset.\r\n    const position = getControlPosition(e, touchIdentifier, this);\r\n    if (position == null) return; // not possible but satisfies flow\r\n    const {x, y} = position;\r\n\r\n    // Create an event object with all the data parents need to make a decision here.\r\n    const coreEvent = createCoreData(this, x, y);\r\n\r\n    log('DraggableCore: handleDragStart: %j', coreEvent);\r\n\r\n    // Call event handler. If it returns explicit false, cancel.\r\n    log('calling', this.props.onStart);\r\n    const shouldUpdate = this.props.onStart(e, coreEvent);\r\n    if (shouldUpdate === false) return;\r\n\r\n    // Add a style to the body to disable user-select. This prevents text from\r\n    // being selected all over the page.\r\n    if (this.props.enableUserSelectHack) addUserSelectStyles(ownerDocument);\r\n\r\n    // Initiate dragging. Set the current x and y as offsets\r\n    // so we know how much we've moved during the drag. This allows us\r\n    // to drag elements around even if they have been moved, without issue.\r\n    this.setState({\r\n      dragging: true,\r\n\r\n      lastX: x,\r\n      lastY: y\r\n    });\r\n\r\n    // Add events to the document directly so we catch when the user's mouse/touch moves outside of\r\n    // this element. We use different events depending on whether or not we have detected that this\r\n    // is a touch-capable device.\r\n    addEvent(ownerDocument, dragEventFor.move, this.handleDrag);\r\n    addEvent(ownerDocument, dragEventFor.stop, this.handleDragStop);\r\n  };\r\n\r\n  handleDrag: EventHandler<MouseTouchEvent> = (e) => {\r\n\r\n    // Prevent scrolling on mobile devices, like ipad/iphone.\r\n    if (e.type === 'touchmove') e.preventDefault();\r\n\r\n    // Get the current drag point from the event. This is used as the offset.\r\n    const position = getControlPosition(e, this.state.touchIdentifier, this);\r\n    if (position == null) return;\r\n    let {x, y} = position;\r\n\r\n    // Snap to grid if prop has been provided\r\n    if (Array.isArray(this.props.grid)) {\r\n      let deltaX = x - this.state.lastX, deltaY = y - this.state.lastY;\r\n      [deltaX, deltaY] = snapToGrid(this.props.grid, deltaX, deltaY);\r\n      if (!deltaX && !deltaY) return; // skip useless drag\r\n      x = this.state.lastX + deltaX, y = this.state.lastY + deltaY;\r\n      [x, y] = snapToGrid(this.props.grid, x, y);\r\n    }\r\n\r\n    const coreEvent = createCoreData(this, x, y);\r\n\r\n    log('DraggableCore: handleDrag: %j', coreEvent);\r\n\r\n    // Call event handler. If it returns explicit false, trigger end.\r\n    const shouldUpdate = this.props.onDrag(e, coreEvent);\r\n    if (shouldUpdate === false) {\r\n      try {\r\n        // $FlowIgnore\r\n        this.handleDragStop(new MouseEvent('mouseup'));\r\n      } catch (err) {\r\n        // Old browsers\r\n        const event = ((document.createEvent('MouseEvents'): any): MouseTouchEvent);\r\n        // I see why this insanity was deprecated\r\n        // $FlowIgnore\r\n        event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\r\n        this.handleDragStop(event);\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      lastX: x,\r\n      lastY: y\r\n    });\r\n  };\r\n\r\n  handleDragStop: EventHandler<MouseTouchEvent> = (e) => {\r\n    if (!this.state.dragging) return;\r\n\r\n    const position = getControlPosition(e, this.state.touchIdentifier, this);\r\n    if (position == null) return;\r\n    const {x, y} = position;\r\n    const coreEvent = createCoreData(this, x, y);\r\n\r\n    const thisNode = ReactDOM.findDOMNode(this);\r\n    if (thisNode) {\r\n      // Remove user-select hack\r\n      if (this.props.enableUserSelectHack) removeUserSelectStyles(thisNode.ownerDocument);\r\n    }\r\n\r\n    log('DraggableCore: handleDragStop: %j', coreEvent);\r\n\r\n    // Reset the el.\r\n    this.setState({\r\n      dragging: false,\r\n      lastX: NaN,\r\n      lastY: NaN\r\n    });\r\n\r\n    // Call event handler\r\n    this.props.onStop(e, coreEvent);\r\n\r\n    if (thisNode) {\r\n      // Remove event handlers\r\n      log('DraggableCore: Removing handlers');\r\n      removeEvent(thisNode.ownerDocument, dragEventFor.move, this.handleDrag);\r\n      removeEvent(thisNode.ownerDocument, dragEventFor.stop, this.handleDragStop);\r\n    }\r\n  };\r\n\r\n  onMouseDown: EventHandler<MouseTouchEvent> = (e) => {\r\n    dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse\r\n\r\n    return this.handleDragStart(e);\r\n  };\r\n\r\n  onMouseUp: EventHandler<MouseTouchEvent> = (e) => {\r\n    dragEventFor = eventsFor.mouse;\r\n\r\n    return this.handleDragStop(e);\r\n  };\r\n\r\n  // Same as onMouseDown (start drag), but now consider this a touch device.\r\n  onTouchStart: EventHandler<MouseTouchEvent> = (e) => {\r\n    // We're on a touch device now, so change the event handlers\r\n    dragEventFor = eventsFor.touch;\r\n\r\n    return this.handleDragStart(e);\r\n  };\r\n\r\n  onTouchEnd: EventHandler<MouseTouchEvent> = (e) => {\r\n    // We're on a touch device now, so change the event handlers\r\n    dragEventFor = eventsFor.touch;\r\n\r\n    return this.handleDragStop(e);\r\n  };\r\n\r\n  render() {\r\n    // Reuse the child provided\r\n    // This makes it flexible to use whatever element is wanted (div, ul, etc)\r\n    return React.cloneElement(React.Children.only(this.props.children), {\r\n      style: styleHacks(this.props.children.props.style),\r\n\r\n      // Note: mouseMove handler is attached to document so it will still function\r\n      // when the user drags quickly and leaves the bounds of the element.\r\n      onMouseDown: this.onMouseDown,\r\n      onTouchStart: this.onTouchStart,\r\n      onMouseUp: this.onMouseUp,\r\n      onTouchEnd: this.onTouchEnd\r\n    });\r\n  }\r\n}\r\n","// @flow\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOM from 'react-dom';\r\nimport classNames from 'classnames';\r\nimport {createCSSTransform, createSVGTransform} from './utils/domFns';\r\nimport {canDragX, canDragY, createDraggableData, getBoundPosition} from './utils/positionFns';\r\nimport {dontSetMe} from './utils/shims';\r\nimport DraggableCore from './DraggableCore';\r\nimport type {ControlPosition, DraggableBounds, DraggableCoreProps} from './DraggableCore';\r\nimport log from './utils/log';\r\nimport type {DraggableEventHandler} from './utils/types';\r\nimport type {Element as ReactElement} from 'react';\r\n\r\ntype DraggableState = {\r\n  dragging: boolean,\r\n  dragged: boolean,\r\n  x: number, y: number,\r\n  slackX: number, slackY: number,\r\n  isElementSVG: boolean\r\n};\r\n\r\nexport type DraggableProps = {\r\n  ...$Exact<DraggableCoreProps>,\r\n  axis: 'both' | 'x' | 'y' | 'none',\r\n  bounds: DraggableBounds | string | false,\r\n  defaultClassName: string,\r\n  defaultClassNameDragging: string,\r\n  defaultClassNameDragged: string,\r\n  defaultPosition: ControlPosition,\r\n  position: ControlPosition,\r\n};\r\n\r\n//\r\n// Define <Draggable>\r\n//\r\n\r\nexport default class Draggable extends React.Component<DraggableProps, DraggableState> {\r\n\r\n  static displayName = 'Draggable';\r\n\r\n  static propTypes = {\r\n    // Accepts all props <DraggableCore> accepts.\r\n    ...DraggableCore.propTypes,\r\n\r\n    /**\r\n     * `axis` determines which axis the draggable can move.\r\n     *\r\n     *  Note that all callbacks will still return data as normal. This only\r\n     *  controls flushing to the DOM.\r\n     *\r\n     * 'both' allows movement horizontally and vertically.\r\n     * 'x' limits movement to horizontal axis.\r\n     * 'y' limits movement to vertical axis.\r\n     * 'none' limits all movement.\r\n     *\r\n     * Defaults to 'both'.\r\n     */\r\n    axis: PropTypes.oneOf(['both', 'x', 'y', 'none']),\r\n\r\n    /**\r\n     * `bounds` determines the range of movement available to the element.\r\n     * Available values are:\r\n     *\r\n     * 'parent' restricts movement within the Draggable's parent node.\r\n     *\r\n     * Alternatively, pass an object with the following properties, all of which are optional:\r\n     *\r\n     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\r\n     *\r\n     * All values are in px.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```jsx\r\n     *   let App = React.createClass({\r\n     *       render: function () {\r\n     *         return (\r\n     *            <Draggable bounds={{right: 300, bottom: 300}}>\r\n     *              <div>Content</div>\r\n     *           </Draggable>\r\n     *         );\r\n     *       }\r\n     *   });\r\n     * ```\r\n     */\r\n    bounds: PropTypes.oneOfType([\r\n      PropTypes.shape({\r\n        left: PropTypes.number,\r\n        right: PropTypes.number,\r\n        top: PropTypes.number,\r\n        bottom: PropTypes.number\r\n      }),\r\n      PropTypes.string,\r\n      PropTypes.oneOf([false])\r\n    ]),\r\n\r\n    defaultClassName: PropTypes.string,\r\n    defaultClassNameDragging: PropTypes.string,\r\n    defaultClassNameDragged: PropTypes.string,\r\n\r\n    /**\r\n     * `defaultPosition` specifies the x and y that the dragged item should start at\r\n     *\r\n     * Example:\r\n     *\r\n     * ```jsx\r\n     *      let App = React.createClass({\r\n     *          render: function () {\r\n     *              return (\r\n     *                  <Draggable defaultPosition={{x: 25, y: 25}}>\r\n     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\r\n     *                  </Draggable>\r\n     *              );\r\n     *          }\r\n     *      });\r\n     * ```\r\n     */\r\n    defaultPosition: PropTypes.shape({\r\n      x: PropTypes.number,\r\n      y: PropTypes.number\r\n    }),\r\n\r\n    /**\r\n     * `position`, if present, defines the current position of the element.\r\n     *\r\n     *  This is similar to how form elements in React work - if no `position` is supplied, the component\r\n     *  is uncontrolled.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```jsx\r\n     *      let App = React.createClass({\r\n     *          render: function () {\r\n     *              return (\r\n     *                  <Draggable position={{x: 25, y: 25}}>\r\n     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\r\n     *                  </Draggable>\r\n     *              );\r\n     *          }\r\n     *      });\r\n     * ```\r\n     */\r\n    position: PropTypes.shape({\r\n      x: PropTypes.number,\r\n      y: PropTypes.number\r\n    }),\r\n\r\n    /**\r\n     * These properties should be defined on the child, not here.\r\n     */\r\n    className: dontSetMe,\r\n    style: dontSetMe,\r\n    transform: dontSetMe\r\n  };\r\n\r\n  static defaultProps = {\r\n    ...DraggableCore.defaultProps,\r\n    axis: 'both',\r\n    bounds: false,\r\n    defaultClassName: 'react-draggable',\r\n    defaultClassNameDragging: 'react-draggable-dragging',\r\n    defaultClassNameDragged: 'react-draggable-dragged',\r\n    defaultPosition: {x: 0, y: 0},\r\n    position: null\r\n  };\r\n\r\n  constructor(props: DraggableProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // Whether or not we are currently dragging.\r\n      dragging: false,\r\n\r\n      // Whether or not we have been dragged before.\r\n      dragged: false,\r\n\r\n      // Current transform x and y.\r\n      x: props.position ? props.position.x : props.defaultPosition.x,\r\n      y: props.position ? props.position.y : props.defaultPosition.y,\r\n\r\n      // Used for compensating for out-of-bounds drags\r\n      slackX: 0, slackY: 0,\r\n\r\n      // Can only determine if SVG after mounting\r\n      isElementSVG: false\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props.position && !(this.props.onDrag || this.props.onStop)) {\r\n      // eslint-disable-next-line\r\n      console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' +\r\n        'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' +\r\n        '`position` of this element.');\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Check to see if the element passed is an instanceof SVGElement\r\n    if(typeof window.SVGElement !== 'undefined' && ReactDOM.findDOMNode(this) instanceof window.SVGElement) {\r\n      this.setState({ isElementSVG: true });\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps: Object) {\r\n    // Set x/y if position has changed\r\n    if (nextProps.position &&\r\n        (!this.props.position ||\r\n          nextProps.position.x !== this.props.position.x ||\r\n          nextProps.position.y !== this.props.position.y\r\n        )\r\n      ) {\r\n      this.setState({ x: nextProps.position.x, y: nextProps.position.y });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState({dragging: false}); // prevents invariant if unmounted while dragging\r\n  }\r\n\r\n  onDragStart: DraggableEventHandler = (e, coreData) => {\r\n    log('Draggable: onDragStart: %j', coreData);\r\n\r\n    // Short-circuit if user's callback killed it.\r\n    const shouldStart = this.props.onStart(e, createDraggableData(this, coreData));\r\n    // Kills start event on core as well, so move handlers are never bound.\r\n    if (shouldStart === false) return false;\r\n\r\n    this.setState({dragging: true, dragged: true});\r\n  };\r\n\r\n  onDrag: DraggableEventHandler = (e, coreData) => {\r\n    if (!this.state.dragging) return false;\r\n    log('Draggable: onDrag: %j', coreData);\r\n\r\n    const uiData = createDraggableData(this, coreData);\r\n\r\n    const newState: $Shape<DraggableState> = {\r\n      x: uiData.x,\r\n      y: uiData.y\r\n    };\r\n\r\n    // Keep within bounds.\r\n    if (this.props.bounds) {\r\n      // Save original x and y.\r\n      const {x, y} = newState;\r\n\r\n      // Add slack to the values used to calculate bound position. This will ensure that if\r\n      // we start removing slack, the element won't react to it right away until it's been\r\n      // completely removed.\r\n      newState.x += this.state.slackX;\r\n      newState.y += this.state.slackY;\r\n\r\n      // Get bound position. This will ceil/floor the x and y within the boundaries.\r\n      const [newStateX, newStateY] = getBoundPosition(this, newState.x, newState.y);\r\n      newState.x = newStateX;\r\n      newState.y = newStateY;\r\n\r\n      // Recalculate slack by noting how much was shaved by the boundPosition handler.\r\n      newState.slackX = this.state.slackX + (x - newState.x);\r\n      newState.slackY = this.state.slackY + (y - newState.y);\r\n\r\n      // Update the event we fire to reflect what really happened after bounds took effect.\r\n      uiData.x = newState.x;\r\n      uiData.y = newState.y;\r\n      uiData.deltaX = newState.x - this.state.x;\r\n      uiData.deltaY = newState.y - this.state.y;\r\n    }\r\n\r\n    // Short-circuit if user's callback killed it.\r\n    const shouldUpdate = this.props.onDrag(e, uiData);\r\n    if (shouldUpdate === false) return false;\r\n\r\n    this.setState(newState);\r\n  };\r\n\r\n  onDragStop: DraggableEventHandler = (e, coreData) => {\r\n    if (!this.state.dragging) return false;\r\n\r\n    // Short-circuit if user's callback killed it.\r\n    const shouldStop = this.props.onStop(e, createDraggableData(this, coreData));\r\n    if (shouldStop === false) return false;\r\n\r\n    log('Draggable: onDragStop: %j', coreData);\r\n\r\n    const newState: $Shape<DraggableState> = {\r\n      dragging: false,\r\n      slackX: 0,\r\n      slackY: 0\r\n    };\r\n\r\n    // If this is a controlled component, the result of this operation will be to\r\n    // revert back to the old position. We expect a handler on `onDragStop`, at the least.\r\n    const controlled = Boolean(this.props.position);\r\n    if (controlled) {\r\n      const {x, y} = this.props.position;\r\n      newState.x = x;\r\n      newState.y = y;\r\n    }\r\n\r\n    this.setState(newState);\r\n  };\r\n\r\n  render(): ReactElement<any> {\r\n    let style = {}, svgTransform = null;\r\n\r\n    // If this is controlled, we don't want to move it - unless it's dragging.\r\n    const controlled = Boolean(this.props.position);\r\n    const draggable = !controlled || this.state.dragging;\r\n\r\n    const position = this.props.position || this.props.defaultPosition;\r\n    const transformOpts = {\r\n      // Set left if horizontal drag is enabled\r\n      x: canDragX(this) && draggable ?\r\n        this.state.x :\r\n        position.x,\r\n\r\n      // Set top if vertical drag is enabled\r\n      y: canDragY(this) && draggable ?\r\n        this.state.y :\r\n        position.y\r\n    };\r\n\r\n    // If this element was SVG, we use the `transform` attribute.\r\n    if (this.state.isElementSVG) {\r\n      svgTransform = createSVGTransform(transformOpts);\r\n    } else {\r\n      // Add a CSS transform to move the element around. This allows us to move the element around\r\n      // without worrying about whether or not it is relatively or absolutely positioned.\r\n      // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\r\n      // has a clean slate.\r\n      style = createCSSTransform(transformOpts);\r\n    }\r\n\r\n    const {\r\n      defaultClassName,\r\n      defaultClassNameDragging,\r\n      defaultClassNameDragged\r\n    } = this.props;\r\n\r\n    const children = React.Children.only(this.props.children);\r\n\r\n    // Mark with class while dragging\r\n    const className = classNames((children.props.className || ''), defaultClassName, {\r\n      [defaultClassNameDragging]: this.state.dragging,\r\n      [defaultClassNameDragged]: this.state.dragged\r\n    });\r\n\r\n    // Reuse the child provided\r\n    // This makes it flexible to use whatever element is wanted (div, ul, etc)\r\n    return (\r\n      <DraggableCore {...this.props} onStart={this.onDragStart} onDrag={this.onDrag} onStop={this.onDragStop}>\r\n        {React.cloneElement(children, {\r\n          className: className,\r\n          style: {...children.props.style, ...style},\r\n          transform: svgTransform\r\n        })}\r\n      </DraggableCore>\r\n    );\r\n  }\r\n}\r\n","import Draggable from './Draggable';\r\nimport DraggableCore from './DraggableCore';\r\n\r\n// Previous versions of this lib exported <Draggable> as the root export. As to not break\r\n// them, or TypeScript, we export *both* as the root and as 'default'.\r\n// See https://github.com/mzabriskie/react-draggable/pull/254\r\n// and https://github.com/mzabriskie/react-draggable/issues/266\r\nDraggable.default = Draggable;\r\nDraggable.DraggableCore = DraggableCore;\r\n\r\nexport default Draggable;\r\n"],"names":["getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","assign","test1","String","getOwnPropertyNames","test2","i","fromCharCode","map","n","join","test3","split","forEach","letter","keys","err","shouldUseNative","emptyFunction","module","shim","props","propName","componentName","location","propFullName","secret","ReactPropTypesSecret","Error","name","getShim","isRequired","ReactPropTypes","array","bool","func","number","object","string","symbol","any","arrayOf","element","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","require$$1","hasOwn","classNames","classes","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","exports","default","window","findInArray","callback","isFunction","toString","isNum","num","isNaN","int","a","parseInt","dontSetMe","prefixes","browserPrefixToKey","prop","prefix","str","out","shouldCapitalize","toUpperCase","kebabToTitleCase","document","style","documentElement","getPrefix","matchesSelectorFunc","matchesSelector","el","selector","method","matchesSelectorAndParentsTo","baseNode","parentNode","addEvent","event","handler","attachEvent","addEventListener","removeEvent","detachEvent","removeEventListener","addUserSelectStyles","doc","className","styleEl","getElementById","createElement","type","id","innerHTML","getElementsByTagName","appendChild","body","classList","add","match","RegExp","removeUserSelectStyles","remove","replace","selection","empty","getSelection","removeAllRanges","e","getBoundPosition","draggable","x","y","bounds","left","top","right","bottom","cloneBounds","findDOMNode","ownerDocument","ownerWindow","defaultView","boundNode","querySelector","HTMLElement","nodeStyle","getComputedStyle","boundNodeStyle","offsetLeft","paddingLeft","marginLeft","offsetTop","paddingTop","marginTop","width","clientWidth","computedStyle","paddingRight","innerWidth","borderLeftWidth","borderRightWidth","outerWidth","marginRight","height","clientHeight","paddingBottom","innerHeight","borderTopWidth","borderBottomWidth","outerHeight","marginBottom","Math","min","max","snapToGrid","grid","pendingX","pendingY","round","getControlPosition","touchIdentifier","draggableCore","touchObj","identifier","targetTouches","t","changedTouches","getTouch","offsetParent","evt","offsetParentRect","getBoundingClientRect","clientX","scrollLeft","clientY","scrollTop","offsetXYFromParent","createCoreData","state","isStart","lastX","deltaY","lastY","createDraggableData","coreData","deltaX","ReactDOM","eventsFor","dragEventFor","mouse","DraggableCore","NaN","handleDragStart","onMouseDown","_this","allowAnyClick","button","thisNode","disabled","target","Node","handle","cancel","getTouchIdentifier","setState","position","coreEvent","onStart","enableUserSelectHack","move","handleDrag","stop","handleDragStop","preventDefault","onDrag","MouseEvent","createEvent","initMouseEvent","dragging","onStop","onMouseUp","onTouchStart","touch","onTouchEnd","this","React","cloneElement","Children","only","children","childStyle","styleHacks","Component","displayName","propTypes","nodeType","defaultProps","Draggable","onDragStart","dragged","uiData","newState","slackX","slackY","newStateX","newStateY","onDragStop","Boolean","defaultPosition","warn","SVGElement","isElementSVG","nextProps","svgTransform","transformOpts","axis","canDragX","canDragY","browserPrefix","defaultClassName","defaultClassNameDragging","defaultClassNameDragged"],"mappings":"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"}